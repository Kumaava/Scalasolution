object Collections {
  
  println("Welcome to the Scala worksheet")       //> Welcome to the Scala worksheet
  
  /* ____LIST____ */
  val numbers = List(32, 95, 24, 21, 17)          //> numbers  : List[Int] = List(32, 95, 24, 21, 17)
  println(s"${numbers.length}, numbers : $numbers")
                                                  //> 5, numbers : List(32, 95, 24, 21, 17)
  val total = numbers.reduce( (a: Int, b: Int) => a + b )
                                                  //> total  : Int = 189
  var total1 = 0; for (i <- numbers) { total1 += i }
                                                  //> total1  : Int = 189
  val oddsAndEvents = List(List(1, 3, 5), List(2, 4, 6))
                                                  //> oddsAndEvents  : List[List[Int]] = List(List(1, 3, 5), List(2, 4, 6))
 oddsAndEvents.flatten                            //> res0: List[Int] = List(1, 3, 5, 2, 4, 6)
 
  val keyValues = List(('A', 65), ('B',66), ('C',67))
                                                  //> keyValues  : List[(Char, Int)] = List((A,65), (B,66), (C,67))
  
  // Append Values to a list
  val appended = List(1, 2, 3, 4) :+ 5            //> appended  : List[Int] = List(1, 2, 3, 4, 5)
  val suffix = appended takeRight 2               //> suffix  : List[Int] = List(4, 5)
  val middle = suffix dropRight 2                 //> middle  : List[Int] = List()
  
  val primes = List(2, 3, 5, 7, 11, 13)           //> primes  : List[Int] = List(2, 3, 5, 7, 11, 13)
  var i = primes                                  //> i  : List[Int] = List(2, 3, 5, 7, 11, 13)
  while ( ! i.isEmpty) { print(i.head + "## "); i = i.tail }
                                                  //> 2## 3## 5## 7## 11## 13## 
  val l: List[Int] = List()                       //> l  : List[Int] = List()
  l == Nil                                        //> res1: Boolean = true
 
 
 def visit(i: List[Int]) { if (i.size > 0) { print(i.head + " " );
        print(i.tail) } }                         //> visit: (i: List[Int])Unit
        
  visit(primes)                                   //> 2 List(3, 5, 7, 11, 13)
  
  // cons opeartor in Lists
   val numbers1 = 1 :: 2 :: 3 :: Nil              //> numbers1  : List[Int] = List(1, 2, 3)
   val first = List(1)                            //> first  : List[Int] = List(1)
   val second = 2 :: first                        //> second  : List[Int] = List(2, 1)
   numbers1.reverse                               //> res2: List[Int] = List(3, 2, 1)
   
   //FIlter
   val f = List(23, 8, 14, 21) filter (_ > 18)    //> f  : List[Int] = List(23, 21)
   //Partition
   val p = List(1, 2, 3, 4, 5) partition (_ < 3)  //> p  : (List[Int], List[Int]) = (List(1, 2),List(3, 4, 5))
   // SORT
   val s = List("apple", "to", "killmerightaway") sortBy (_.size)
                                                  //> s  : List[String] = List(to, apple, killmerightaway)
  val colors = List("red", "green", "blue")       //> colors  : List[String] = List(red, green, blue)
  println(s"I have ${colors.size} colors: $colors")
                                                  //> I have 3 colors: List(red, green, blue)
  colors.foreach( (c: String) => println(c) )     //> red
                                                  //| green
                                                  //| blue
  val sizes = colors.map( (c: String) => c.size ) //> sizes  : List[Int] = List(3, 5, 4)
  colors.head                                     //> res3: String = red
  colors.tail                                     //> res4: List[String] = List(green, blue)
  colors(1)                                       //> res5: String = green
  colors(2)                                       //> res6: String = blue
  for (c <- colors) { println(c) }                //> red
                                                  //| green
                                                  //| blue
  
  /* ___ SETS____*/
 val unique = Set(10, 20, 30, 20, 20, 10)         //> unique  : scala.collection.immutable.Set[Int] = Set(10, 20, 30)
 val sum = unique.reduce( (a: Int, b: Int) => a + b )
                                                  //> sum  : Int = 60
 val colorMap = Map("red" -> 3, "green" -> 5,
  "blue" -> 4)                                    //> colorMap  : scala.collection.immutable.Map[String,Int] = Map(red -> 3, gree
                                                  //| n -> 5, blue -> 4)
  val x = colorMap("blue")                        //> x  : Int = 4
  val y = colorMap("green") + colorMap("blue")    //> y  : Int = 9
  val hasWhite = colorMap.contains("white")       //> hasWhite  : Boolean = false
  for (pairs <- colorMap) { println(pairs) }      //> (red,3)
                                                  //| (green,5)
                                                  //| (blue,4)
  
  
  // MAPS : Collect , MAP , FlatMap
  List(0, 1, 9) collect {case 1 => "ok"}          //> res7: List[String] = List(ok)
  List("milk,tea,and,coffee") flatMap (_.split(','))
                                                  //> res8: List[String] = List(milk, tea, and, coffee)
  List("milk","tea") map (_.toUpperCase)          //> res9: List[String] = List(MILK, TEA)

 // Some actions
  
 val num = List(41, 59, 26).max                   //> num  : Int = 59
 val min = List(10.9, 32.5, 4.23, 5.67).min       //> min  : Double = 4.23
 val product = List(5, 6, 7).product              //> product  : Int = 210
 val sum1 = List(11.3, 23.5, 7.2).sum             //> sum1  : Double = 42.0
  
  // boolean reduction opearations :  contains , endswith , exits, forall , startswith
  
  val validations = List(true, true, false, true, true, true)
                                                  //> validations  : List[Boolean] = List(true, true, false, true, true, true)
  val valid1 = !(validations contains false)      //> valid1  : Boolean = false
  val valid2 = validations forall (_ == true)     //> valid2  : Boolean = false
  val valid3 = validations.exists(_ == false)     //> valid3  : Boolean = true
  
  // Contains
  def contains(x: Int, l: List[Int]): Boolean = {
  var a: Boolean = false
  for (i <- l) { if (!a) a = (i == x) }
  a
  }                                               //> contains: (x: Int, l: List[Int])Boolean
  val included = contains(19, List(46, 19, 92))   //> included  : Boolean = true
  
  
  // List reduction opearations  : fold, reduce
  val answer = List(11.3, 23.5, 7.2).reduceLeft(_ + _)
                                                  //> answer  : Double = 42.0
  
 
  // Operatiions to convert lists
  List(24, 99, 104).mkString(", ")                //> res10: String = 24, 99, 104
  
  List('f', 't').toBuffer                         //> res11: scala.collection.mutable.Buffer[Char] = ArrayBuffer(f, t)
  
  Map("a" -> 1, "b" -> 2).toList                  //> res12: List[(String, Int)] = List((a,1), (b,2))
  
  Set(1 -> true, 3 -> true).toMap                 //> res13: scala.collection.immutable.Map[Int,Boolean] = Map(1 -> true, 3 -> tr
                                                  //| ue)
  List(2, 5, 5, 3, 2).toSet                       //> res14: scala.collection.immutable.Set[Int] = Set(2, 5, 3)
  
  List(2, 5, 5, 3, 2).toString                    //> res15: String = List(2, 5, 5, 3, 2)
  
  
  //PaTTERN mATCHING
  
  val statuses = List(500, 404)                   //> statuses  : List[Int] = List(500, 404)
  val msg = statuses.head match {
  case x if x <= 500 => "okay"
  case _ => "whoah, an error"
  }                                               //> msg  : String = okay
  
  val msg1 = statuses match {
  case x if x contains(500) => "has error"
  case _ => "okay"
  }                                               //> msg1  : String = has error
  
  val head = List('r','g','b') match {
    case x :: xs => x
    case Nil => ' '
    }                                             //> head  : Char = r
   
   val code = ('h', 204, true) match {
   case (_, _, false) => 501
   case ('c', _, true) => 302
   case ('h', x, true) => x
   case (c, x, true) => {
   println(s"Did not expect code $c")
   x
   }
   }                                              //> code  : Int = 204
    
    
    
}
