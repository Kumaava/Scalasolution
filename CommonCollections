object commonCollections {
  println("Welcome to the Scala worksheet")       //> Welcome to the Scala worksheet
  
  // 1) Create a list of the first 20 odd Long numbers. Can you create this with a for-loop,
  //   with the filter operation, and with the map operation? What’s the most efficient and expressive way to write this?
  
  for (i <- 0 to 9; j = i * 2 + 1) yield j        //> res0: scala.collection.immutable.IndexedSeq[Int] = Vector(1, 3, 5, 7, 9, 11,
                                                  //|  13, 15, 17, 19)
   0 to 20 filter (_ % 2 == 1)                    //> res1: scala.collection.immutable.IndexedSeq[Int] = Vector(1, 3, 5, 7, 9, 11,
                                                  //|  13, 15, 17, 19)

  // 2) Write a function titled “factors” that takes a number and returns a list of its factors, other than 1 and the number itself. For example, factors(15) should return List(3, 5).

  def factors( x : Int)  = { 2 to (x-1) filter (x % _ == 0) }
                                                  //> factors: (x: Int)scala.collection.immutable.IndexedSeq[Int]
 factors(15)                                      //> res2: scala.collection.immutable.IndexedSeq[Int] = Vector(3, 5)
  
 /* Then write a new function that applies “factors” to a list of numbers. Try using the list of Long numbers you generated in
 exercise 1. For example, executing this function with List(9, 11, 13, 15) should return List(3, 3, 5), because the factor of 9
 is 3 while the factors of 15 are 3 again and 5. Is this a good place to use map and flatten? Or would a for-loop be a better fit?
  */
  def uniqueFactors(l: Seq[Int]) = l flatMap factors
                                                  //> uniqueFactors: (l: Seq[Int])Seq[Int]
  uniqueFactors(List(9,11,13,12))                 //> res3: Seq[Int] = List(3, 2, 3, 4, 6)
  
  
  /* 3)Write a function, first[A](items: List[A], count: Int): List[A], that returns the first x number of items in a given list. For example, first(List('a','t','o'), 2) should
   return List('a','t'). You could make this a one-liner by invoking one of the built-in list operations that already performs
    this task, or (preferably) implement your own solution. Can you do so with a for-loop? With foldLeft? With a recursive function
     that only accessed head and tail? */
     
     val chars = ('a' to 'f').toList              //> chars  : List[Char] = List(a, b, c, d, e, f)
     
     def first[A](items: List[A], count: Int): List[A] = items take count
                                                  //> first: [A](items: List[A], count: Int)List[A]
     first(chars, 3)                              //> res4: List[Char] = List(a, b, c)
    
    
    //Using a for loop
     def first1[A](items: List[A], count: Int): List[A] = {
     val l = for (i <- 0 until count) yield items(i)
     l.toList
     }                                            //> first1: [A](items: List[A], count: Int)List[A]
     
     first1(chars, 3)                             //> res5: List[Char] = List(a, b, c)
     
     
     //USING FOLDLEFT WHICH RELIES ON REVERSE TO OUTPUT VALUSE
     def first2[A](items: List[A], count: Int): List[A] = {
      items.foldLeft[List[A]](Nil) { (a: List[A], i: A) =>
      if (a.size >= count) a else i :: a
       }.reverse
       }                                          //> first2: [A](items: List[A], count: Int)List[A]
     first2( chars, 3)                            //> res6: List[Char] = List(a, b, c)
     
    //  Recursive Function
    
    def first3[A](items: List[A], count: Int): List[A] = {
    if (count > 0 && items.tail != Nil) items.head :: first3(items.tail, count - 1)
     else Nil
     }                                            //> first3: [A](items: List[A], count: Int)List[A]
     
     first(chars, 3)                              //> res7: List[Char] = List(a, b, c)
     
     
    /* 4) Write a function that takes a list of strings and returns the longest string in the list. Can you avoid using mutable variables here? This
      is an excellent candidate for the list-folding operations we studied. Can you implement this with
      both fold and reduce ? Would your function be more useful if it took a function parameter that
      compared two strings and returned the preferred one? How about if this function was applicable to generic lists, ie lists of any type? */
     
     
     val names = List("niu", "munn", "likk", "hasja", "laakal")
                                                  //> names  : List[String] = List(niu, munn, likk, hasja, laakal)
     def longest(l: List[String]): String = names.sortBy(0 - _.size).head
                                                  //> longest: (l: List[String])String
     longest(names)                               //> res8: String = laakal
     
     
     // Fold
     
      def longest1(l: List[String]): String = {
      names.fold("")((a,i) => if (a.size < i.size) i else a)
      }                                           //> longest1: (l: List[String])String
      longest1(names)                             //> res9: String = laakal
     
     //Reduce
      def longest3(l: List[String]): String = {
      names.reduce((a,i) => if (a.size < i.size) i else a)
      }                                           //> longest3: (l: List[String])String
      
      longest3(names)                             //> res10: String = laakal
      
      
      
      def greatest[A](l: List[A], max: (A,A) => A): A = {
      l reduce ((a,i) => max(a,i))
      }                                           //> greatest: [A](l: List[A], max: (A, A) => A)A
      
      greatest[String](names, (x,y) => if (x.size > y.size) x else y)
                                                  //> res11: String = laakal
      
     // 5) Write a function that reverses a list. Can you write this as a recursive function? This may be a good place for a match expression.
     
     def reverse[A](src: List[A], dest: List[A] = Nil): List[A] = {
     if (src == Nil) dest else reverse(src.tail, src.head :: dest)
     }                                            //> reverse: [A](src: List[A], dest: List[A])List[A]
      reverse(names)                              //> res12: List[String] = List(laakal, hasja, likk, munn, niu)
      
      
      /* 6) Write a function that takes a List[String] and returns a (List[String],List[String]), a tuple of string lists. The first list
       should be items in the original list that are palindromes (written the same forwards and backwards, like "racecar"). The second list
       in the tuple should be all of the remaining items from the original list. You can implement this easily with partition, but are there
        other operations you could use instead?      */
        
       def splitPallies(l: List[String]) = l partition (s => s == s.reverse)
                                                  //> splitPallies: (l: List[String])(List[String], List[String])
       val pall = List("better", "good", "corse", "hun" ,"mundane" )
                                                  //> pall  : List[String] = List(better, good, corse, hun, mundane)
       splitPallies(pall)                         //> res13: (List[String], List[String]) = (List(),List(better, good, corse, hun
                                                  //| , mundane))
      
      def splitPallies1(l: List[String]) = {
       l.foldLeft((List[String](),List[String]())) { (a, i) =>
       if (i == i.reverse) (i :: a._1, a._2) else (a._1, i :: a._2)
       }
       }                                          //> splitPallies1: (l: List[String])(List[String], List[String])
       
       splitPallies1(pall)                        //> res14: (List[String], List[String]) = (List(),List(mundane, hun, corse, goo
                                                  //| d, better))
      
      
      /* question 7 ( Url returning 401 error )
}
